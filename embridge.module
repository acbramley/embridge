<?php
/**
 * @file
 * EMBridge module file.
 */

use \Drupal\Core\Link;
use \Drupal\embridge\Entity\EmbridgeAssetEntity;
use \Drupal\embridge\EmbridgeAssetEntityInterface;
use \Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme().
 */
function embridge_theme() {
  return array(
    'embridge_file_link' => array(
      'variables' => array('asset' => NULL, 'description' => '', 'entity' => NULL, 'link_to' => ''),
    ),
    'embridge_image' => array(
      'variables' => array('asset' => NULL, 'conversion' => '', 'application_id' => '', 'description' => '', 'entity' => NULL, 'link_to' => ''),
    ),
    'embridge_search_results' => array(
      'variables' => array('results' => []),
    ),
  );
}

/**
 * Prepares variables for file link templates.
 *
 * Default template: file-link.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - asset: An EMBridge Asset Entity object to which the link will be created.
 *   - entity: The referring entity.
 *   - link_to: whether to link to the content, the file, or nothing.
 *   - description: A description to be displayed instead of the filename.
 *   - attributes: An associative array of attributes to be placed in the a tag.
 */
function template_preprocess_embridge_file_link(&$variables) {
  $asset = $variables['asset'];
  $options = array();

  $asset_entity = ($asset instanceof EmbridgeAssetEntity) ? $asset : EmbridgeAssetEntity::load($asset->id);
  $variables['asset'] = $asset;

  $mime_type = $asset->getMimeType();
  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options['attributes']['type'] = $mime_type . '; length=' . $asset->getSize();

  // Use the description as the link text if available.
  if (empty($variables['description'])) {
    $link_text = $asset_entity->getFilename();
  }
  else {
    $link_text = $variables['description'];
    $options['attributes']['title'] = $asset_entity->getFilename();
  }

  $url = NULL;
  if (!empty($variables['entity']) && $variables['link_to'] == 'content') {
    /** @var Drupal\Core\Entity\EntityInterface $entity */
    $entity = $variables['entity'];
    $url = $entity->urlInfo();
  }
  // Add to variables for embridge_image.
  $variables['url'] = $url;

  // Classes to add to the file field for icons.
  $classes = array(
    'file',
    // Add a specific class for each and every mime type.
    'file--mime-' . strtr($mime_type, array('/' => '-', '.' => '-')),
    // Add a more general class for groups of well known mime types.
    'file--' . file_icon_class($mime_type),
  );

  // Set file classes to the options array.
  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']->addClass($classes);

  if ($url) {
    $link = Link::fromTextAndUrl($link_text, $url);
  }
  else {
    $link = $link_text;
  }
  $variables['link'] = $link;
}

/**
 * Prepares variables for file link templates.
 *
 * Default template: file-link.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - asset: An EMBridge Asset Entity object to which the link will be created.
 *   - entity: The referring entity.
 *   - link_to: whether to link to the content, the file, or nothing.
 *   - description: A description to be displayed instead of the filename.
 *   - attributes: An associative array of attributes to be placed in the a tag.
 */
function template_preprocess_embridge_image(&$variables) {
  template_preprocess_embridge_file_link($variables);

  $variables['image'] = array(
    '#theme' => 'image',
  );

  /** @var EmbridgeAssetEntity $asset */
  $asset = $variables['asset'];
  $variables['image']['#width'] = $asset->getWidth();
  $variables['image']['#height'] = $asset->getHeight();
  $variables['image']['#alt'] = $variables['description'];

  /** @var \Drupal\embridge\EnterMediaAssetHelperInterface $asset_helper */
  $asset_helper = Drupal::getContainer()->get('embridge.asset_helper');
  $uri = $asset_helper->getAssetConversionUrl($asset, $variables['application_id'], $variables['conversion']);
  if ($variables['link_to'] == 'file') {
    $variables['url'] = $uri;
  }

  $variables['image']['#uri'] = $uri;
}

/**
 * Checks that a file meets the criteria specified by the validators.
 *
 * After executing the validator callbacks specified hook_file_validate() will
 * also be called to allow other modules to report errors about the file.
 *
 * @param EmbridgeAssetEntityInterface $asset
 *   A file entity.
 * @param array $validators
 *   An optional, associative array of callback functions used to validate the
 *   file. The keys are function names and the values arrays of callback
 *   parameters which will be passed in after the file entity. The
 *   functions should return an array of error messages; an empty array
 *   indicates that the file passed validation. The functions will be called in
 *   the order specified.
 *
 * @return array
 *   An array containing validation error messages.
 *
 * @see hook_file_validate()
 */
function embridge_asset_validate(EmbridgeAssetEntityInterface $asset, $validators = array()) {
  // Call the validation functions specified by this function's caller.
  $errors = array();
  foreach ($validators as $function => $args) {
    if (function_exists($function)) {
      array_unshift($args, $asset);
      $errors = array_merge($errors, call_user_func_array($function, $args));
    }
  }

  // Let other modules perform validation on the new file.
  return array_merge($errors, \Drupal::moduleHandler()->invokeAll('embridge_asset_validate', array($asset)));
}


/**
 * Checks that the filename ends with an allowed extension.
 *
 * @param EmbridgeAssetEntityInterface $asset
 *   An Embridge asset entity.
 * @param string $extensions
 *   A string with a space separated list of allowed extensions.
 *
 * @return array
 *   An array. If the file extension is not allowed, it will contain an error
 *   message.
 *
 * @see hook_file_validate()
 */
function embridge_asset_validate_file_extensions(EmbridgeAssetEntityInterface $asset, $extensions) {
  $errors = array();

  $regex = '/\.(' . preg_replace('/ +/', '|', preg_quote($extensions)) . ')$/i';
  if (!preg_match($regex, $asset->getFilename())) {
    $errors[] = t('Only files with the following extensions are allowed: %files-allowed.', array('%files-allowed' => $extensions));
  }
  return $errors;
}

/**
 * Checks that the file's size is below certain limits.
 *
 * @param EmbridgeAssetEntityInterface $file
 *   An embridge asset entity.
 * @param int $file_limit
 *   An integer specifying the maximum file size in bytes. Zero indicates that
 *   no limit should be enforced.
 * @param int $user_limit
 *   An integer specifying the maximum number of bytes the user is allowed.
 *   Zero indicates that no limit should be enforced.
 *
 * @return array
 *   An array. If the file size exceeds limits, it will contain an error
 *   message.
 *
 * @see hook_file_validate()
 */
function embridge_asset_validate_file_size(EmbridgeAssetEntityInterface $file, $file_limit = 0, $user_limit = 0) {
  $user = \Drupal::currentUser();
  $errors = array();

  if ($file_limit && $file->getSize() > $file_limit) {
    $errors[] = t('The file is %filesize exceeding the maximum file size of %maxsize.', array('%filesize' => format_size($file->getSize()), '%maxsize' => format_size($file_limit)));
  }

  // Save a query by only calling spaceUsed() when a limit is provided.
  if ($user_limit && (\Drupal::entityManager()->getStorage('file')->spaceUsed($user->id()) + $file->getSize()) > $user_limit) {
    $errors[] = t('The file is %filesize which would exceed your disk quota of %quota.', array('%filesize' => format_size($file->getSize()), '%quota' => format_size($user_limit)));
  }

  return $errors;
}