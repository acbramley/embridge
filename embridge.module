<?php
/**
 * @file
 * EMBridge module file.
 */

use \Drupal\Core\Url;
use \Drupal\Core\Link;
use \Drupal\embridge\Entity\EmbridgeAssetEntity;
use \Drupal\embridge\EmbridgeAssetEntityInterface;
use \Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme().
 */
function embridge_theme() {
  return array(
    // From file.module.
    'embridge_file_link' => array(
      'variables' => array('asset' => NULL),
    ),
  );
}

/**
 * Prepares variables for file link templates.
 *
 * Default template: file-link.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - asset: An EMbridge Asset Entity object to which the link will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     files. Defaults to the value of the "icon.directory" variable.
 *   - description: A description to be displayed instead of the filename.
 *   - attributes: An associative array of attributes to be placed in the a tag.
 */
function template_preprocess_embridge_file_link(&$variables) {
  $asset = $variables['asset'];
  $options = array();

  $asset_entity = ($asset instanceof EmbridgeAssetEntity) ? $asset : EmbridgeAssetEntity::load($asset->id);
  // TODO: Remove once we have urls from EMDB.
  $url = file_create_url($asset_entity->getSourcePath());

  $mime_type = $asset->getMimeType();
  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options['attributes']['type'] = $mime_type . '; length=' . $asset->getSize();

  // Use the description as the link text if available.
  if (empty($variables['description'])) {
    $link_text = $asset_entity->getFilename();
  }
  else {
    $link_text = $variables['description'];
    $options['attributes']['title'] = $asset_entity->getFilename();
  }

  // Classes to add to the file field for icons.
  $classes = array(
    'file',
    // Add a specific class for each and every mime type.
    'file--mime-' . strtr($mime_type, array('/' => '-', '.' => '-')),
    // Add a more general class for groups of well known mime types.
    'file--' . file_icon_class($mime_type),
  );

  // Set file classes to the options array.
  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']->addClass($classes);

  $link = Link::fromTextAndUrl($link_text, Url::fromUri($url, $options));
  $variables['link'] = $link;
}


/**
 * Checks that a file meets the criteria specified by the validators.
 *
 * After executing the validator callbacks specified hook_file_validate() will
 * also be called to allow other modules to report errors about the file.
 *
 * @param EmbridgeAssetEntityInterface $asset
 *   A file entity.
 * @param array $validators
 *   An optional, associative array of callback functions used to validate the
 *   file. The keys are function names and the values arrays of callback
 *   parameters which will be passed in after the file entity. The
 *   functions should return an array of error messages; an empty array
 *   indicates that the file passed validation. The functions will be called in
 *   the order specified.
 *
 * @return array
 *   An array containing validation error messages.
 *
 * @see hook_file_validate()
 */
function embridge_file_validate(EmbridgeAssetEntityInterface $asset, $validators = array()) {
  // Call the validation functions specified by this function's caller.
  $errors = array();
  foreach ($validators as $function => $args) {
    if (function_exists($function)) {
      array_unshift($args, $asset);
      $errors = array_merge($errors, call_user_func_array($function, $args));
    }
  }

  // Let other modules perform validation on the new file.
  return array_merge($errors, \Drupal::moduleHandler()->invokeAll('file_validate', array($asset)));
}